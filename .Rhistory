log(.temp$FDis_XylemVulnerability + (1 - min(.temp$FDis_XylemVulnerability, na.rm = T)))
hist(.temp$FDis_XylemVulnerability_log)
png(
"output_plot/XYplot.jpg",
width = 10,
height = 10,
units = 'in',
res = 300
)
op<- par(mfrow=c(2,2))
plot(SpRich_log~FDis_SeedMass_log, .temp)
mod<-lm(SpRich_log~FDis_SeedMass_log, .temp)
mods<-summary(mod)
mods$r.squared
mods$fstatistic
abline(mod, col='blue')
plot(SpRich_log~FDis_Height_log, .temp)
mod<-lm(SpRich_log~FDis_Height_log, .temp)
mods<-summary(mod)
mods$r.squared
mods$fstatistic
abline(mod, col='blue')
plot(SpRich_log~FDis_SLA_log, .temp)
mod<-lm(SpRich_log~FDis_SLA_log, .temp)
mods<-summary(mod)
mods$r.squared
mods$fstatistic
abline(mod, col='blue')
plot(SpRich_log~FDis_XylemVulnerability_log, .temp)
mod<-lm(SpRich_log~FDis_XylemVulnerability_log, .temp)
mods<-summary(mod)
mods$r.squared
mods$fstatistic
abline(mod, col='blue')
par(op)
View(mods)
op<- par(mfrow=c(2,2))
plot(SpRich_log~FDis_SeedMass_log, .temp)
mod<-lm(SpRich_log~FDis_SeedMass_log, .temp)
mods<-summary(mod)
mods$r.squared
mods$fstatistic
abline(mod, col='blue')
cor.test(.temp$SpRich_log, .temp$FDis_SeedMass_log)
cor.test(.temp$SpRich_log, .temp$FDis_XylemVulnerability_log)
hist(.temp$SpRich_log)
.temp$FDis_SeedMass_log <-
log(.temp$FDis_SeedMass + (1 - min(.temp$FDis_SeedMass, na.rm = T)))
hist(.temp$FDis_SeedMass_log)
.temp$FDis_Height_log <-
log(.temp$FDis_Height + (1 - min(.temp$FDis_Height, na.rm = T)))
hist(.temp$FDis_Height_log)
.temp$FDis_SLA_log <-
log(.temp$FDis_SLA + (1 - min(.temp$FDis_SLA, na.rm = T)))
hist(.temp$FDis_SLA_log)
.temp$SpRich_log <-
log(.temp$SpRich + (1 - min(.temp$SpRich, na.rm = T)))
hist(.temp$SpRich_log)
.temp$FDis_SeedMass_log <-
log(.temp$FDis_SeedMass + (1 - min(.temp$FDis_SeedMass, na.rm = T)))
hist(.temp$FDis_SeedMass_log)
.temp$FDis_Height_log <-
log(.temp$FDis_Height + (1 - min(.temp$FDis_Height, na.rm = T)))
hist(.temp$FDis_Height_log)
.temp$FDis_SLA_log <-
log(.temp$FDis_SLA + (1 - min(.temp$FDis_SLA, na.rm = T)))
hist(.temp$FDis_SLA_log)
.temp$FDis_XylemVulnerability_log <-
log(.temp$FDis_XylemVulnerability + (1 - min(.temp$FDis_XylemVulnerability, na.rm = T)))
hist(.temp$FDis_XylemVulnerability_log)
View(Data_for_analysis)
##%######################################################%##
#                                                          #
####                  Load R packages                   ####
#                                                          #
##%######################################################%##
resetPar <- function() {
dev.new()
op <- par(no.readonly = TRUE)
dev.off()
op
}
par(resetPar())
folder_names <- c( "output_data", 'output_plot')
#Check if the folders  exist in the current directory, if not creates it
for (i in folder_names){
ifelse(!dir.exists(i), dir.create(i), print("Folder exists already"))
}
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c('raster','sp','readxl', 'FD')
ipak(packages)
plot <- read.csv("DATA/RAW/infc05_quantiF3/t1_05_quantiF3.csv", sep=";")
plot <- plot[plot$codcfor < 17,] # Filter unwanted Forest codes out
# Remove plots with recent explotation
plot <- plot[plot$Vut_ha == 0 | is.na(plot$Vut_ha),]
# Remove unused columns in plot data
plot <- plot[,colnames(plot) %in% c("idpunto","codcfor",
"LAT_ND_W84","LON_ND_W84",
"ICCapv_ha","ICWapv_ha","ICVapv_ha",
"Capv_ha","Capm_ha")]
# Here our working projection
setProj<-"+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
# Making spatialpointdataframe before extraction allow controlling for possible CRS misleding
head(plot)
xy.dt<- plot[,3:2]
quanti.sp<- SpatialPointsDataFrame(coords = xy.dt,
data = plot,
proj4string = CRS(setProj))
plot(quanti.sp, pch='.')
rm(xy.dt)
##%######################################################%##
#                                                          #
####               ADD ENVIRONMENTAL DATA               ####
#                                                          #
##%######################################################%##
#----- LOAD VPD and check projection coherence -----#
vpd.r<-raster::raster("DATA/TerraClimate19812010_vpd_italy.nc")
raster::crs(vpd.r)
quanti.sp@data$vpd <-raster::extract(vpd.r, quanti.sp)
rm(vpd.r)
#---- LOAD SoilMoisture and check projection coherence -----#
soilmoisture.r<-raster::raster("DATA/TerraClimate19812010_soil_italy.nc")
raster::crs(soilmoisture.r)
quanti.sp@data$soilmoisture <-raster::extract(soilmoisture.r, quanti.sp)
rm(soilmoisture.r)
#---- Topographic  -----#
italy_elev <- raster::getData('alt',country="ITA", path = "DATA")
projection(italy_elev)
italy_slp <- terrain(italy_elev, opt=c('slope'), unit='degrees')
italy_asp <- terrain(italy_elev, opt=c('aspect'), unit='degrees')
quanti.sp@data$elev<-raster::extract(italy_elev, quanti.sp)
quanti.sp@data$slope<-raster::extract(italy_slp, quanti.sp)
quanti.sp@data$aspect<-raster::extract(italy_asp, quanti.sp)
cc<- raster::raster("DATA/climateclassification/hdr.adf")
raster::crs(cc)
# So, being incompatible projections
quanti.sp_proj <- spTransform(quanti.sp, raster::crs(cc))
projection(quanti.sp_proj)
quanti.sp_proj@data$climate_classification<-raster::extract(cc, quanti.sp_proj)
# Reproject to the original proj
quanti.sp <- spTransform(quanti.sp_proj, CRS(setProj)) # reproject to the original proj
head(quanti.sp@data)
rm(quanti.sp_proj)
### FOR PLOTS THAT HAVE NA VALUES OF CLIMATE, ASSIGN VALUE FROM NEAREST, NON-NA GRID CELL
# devtools::install_github("Pakillo/rSDM")
library(rSDM)
## Better below
pts = quanti.sp[is.na((quanti.sp$slope)),]
pts <- points2nearestcell(locs=pts, ras=italy_slp, showmap=F, showchanges=F)
quanti.sp$slope[is.na(quanti.sp$slope)] <- raster::extract(italy_slp, pts)
pts = quanti.sp[is.na((quanti.sp$aspect)),]
pts <- points2nearestcell(locs=pts, ras=italy_asp, showmap=F, showchanges=F)
quanti.sp$aspect[is.na(quanti.sp$aspect)] <- raster::extract(italy_asp, pts)
# So, being incompatible projections
quanti.sp_proj <- spTransform(quanti.sp, raster::crs(cc))
pts = quanti.sp_proj[is.na((quanti.sp_proj$climate_classification)),]
pts <- points2nearestcell(locs=pts, ras=cc, showmap=F, showchanges=F)
quanti.sp_proj$climate_classification[is.na(quanti.sp_proj$climate_classification)] <- raster::extract(cc, pts)
# Reproject to the original proj
quanti.sp <- spTransform(quanti.sp_proj, CRS(setProj)) # reproject to the original proj
rm(italy_asp, italy_elev, italy_slp, quanti.sp_proj,cc)
load("DATA/bio_df.RData")
quanti.sp@data<- merge(quanti.sp@data, bio.df, by='idpunto')
# Back to dataframe
df<- quanti.sp@data  # I called the whole dataframe
# Read tree data
tree <- read.table("DATA/RAW/infc05_apv/t2_05_apv.csv", sep=";", header=T)
tree <- tree[tree$idpunto %in% df$idpunto,]
# Read trait data
trait <- as.data.frame(readxl::read_excel("DATA/TraitDataFrame.xlsx",
sheet = "AllTraits",
col_types = c("text",
"text",
"numeric",
"numeric",
"numeric",
"numeric",
"numeric",
"numeric",
"numeric"), na = "na"))
# Remove vessel traits & species not in plots
trait <- trait[trait$`Species Code` %in% tree$SPcod, -c(8:9)]
rownames(trait) <- trait$`Species Code`
# Log-transform some variables
trait$SeedMass_log <- log(trait$SeedMass)
trait$Height_log <- log(trait$Height)
trait$SLA_log <- log(trait$SLA)
# Subset to 5 traits and only 1 NA per row for Fdisp
fd_trait <- trait[rowSums(is.na(trait[,c(3:7)])) < 2 , -c(1:4,6)]
# Make a community abundance matrix
tree_comm <- as.matrix(as.data.frame.matrix(table(tree$idpunto, tree$SPcod)))
View(tree_comm)
rowSums(tree_comm)
SpeciesRichness <- rowSums(tree_comm)
SpeciesRichness <- as.data.frame(rowSums(tree_comm))
View(SpeciesRichness)
View(temp)
View(Data_for_analysis)
View(Data_for_analysis)
setDT(SpeciesRichness, keep.rownames = "newname")
library(data.table)
setDT(SpeciesRichness, keep.rownames = "idpunto")
View(SpeciesRichness)
total <- merge(SpeciesRichness,Data_for_analysis,by="idpunto")
merge(SpeciesRichness,Data_for_analysis,by.x="idpunto",by.y="idpunto")
SpeciesRichness$idpunto <- as.double(SpeciesRichness$idpunto)
merge(SpeciesRichness,Data_for_analysis,by.x="idpunto",by.y="idpunto")
Total <- merge(SpeciesRichness,Data_for_analysis,by.x="idpunto",by.y="idpunto")
View(Total)
View(Total)
cor.test(Total$`rowSums(tree_comm)`, Total$cwm_SeedMass_log)
cor.test(Total$`rowSums(tree_comm)`, Total$FDis_All)
cor.test(Total$`rowSums(tree_comm)`, Total$FDis_SeedMass)
### read in the dataset
library(readxl)
LUQDrought_RootTraitData_2020_06_04 <- read_excel("C:/Users/roell/Dropbox/LUQ Drought EXP EcoPhys - Matlaga/Datasets/Trait Data_ROEL/ROOT TRAITS/LUQDrought_RootTraitData_2020-06-04.xlsx",
col_types = c("numeric", "numeric", "text",
"numeric", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric"))
Traitdata <- LUQDrought_RootTraitData_2020_06_04
library(readr)
LUQ_DroughtExp_LeafNutrients_FINAL <- read_csv("C:/Users/roell/OneDrive/Bureaublad/Master thesis/LUQ_DroughtExp_LeafNutrients_FINAL.csv",
col_types = cols(Soil_moisture = col_number(),
iWUE_13C = col_number()))
iWUE = lm(iWUE_13C ~ Soil_moisture + Species, data = LUQ_DroughtExp_LeafNutrients_FINAL)
summary(iWUE)
### Color coding
library(RColorBrewer)
library(scales)
Traitdata$col <- brewer.pal(8, "Dark2")[as.factor(Traitdata$Species)]
### Manual color coding
Color1 <- c("#1B9E77","#D95F02","#7570B3", "#E7298A", "#66A61E", "#E6AB02", "#A6761D", "#666666")
Color2 <- c("#D95F02","#7570B3", "#E7298A", "#E6AB02", "#A6761D")
Color3 <- c("#D95F02","#7570B3", "#E7298A", "#66A61E", "#E6AB02", "#A6761D", "#666666")
Color4 <- c("#D95F02","#7570B3", "#E7298A", "#E6AB02", "#A6761D", "#666666")
color3 <- c('#D95F02', '#7570B3', '#E7298A', '#66A61E', '#E6AB02', '#A6761D', '#666666')
### Compute mass fractions
Traitdata$`Stem dry mass (g)`[Traitdata$Species=="Premon"] <- 0
Traitdata$drymass <-rowSums(cbind(Traitdata$`RootDryMass(g)`, Traitdata$`Stem dry mass (g)`, Traitdata$`Leaf dry mass (g)`))
Traitdata$leaf_fraction <- (Traitdata$`Leaf dry mass (g)`/Traitdata$drymass)
Traitdata$stem_fraction <- (Traitdata$`Stem dry mass (g)`/Traitdata$drymass)
Traitdata$root_fraction <- (Traitdata$`RootDryMass(g)`/Traitdata$drymass)
### compute mean leaf thickness value
Traitdata$Leafthickness <- (Traitdata$`Leaf thick 1 (mm)`+ Traitdata$`Leaf thick 2 (mm)`+ Traitdata$`Leaf thick 3 (mm)`)/3
### compute average leaf area
Traitdata$AvgLeafArea <- (Traitdata$`Leaf area (cm2)` / Traitdata$Leaves)
### Prepare data to take certain species out, if needed
Tetbal <- Traitdata[ which(Traitdata$Species=='Tetbal'), ]
Manbid <- Traitdata[ which(Traitdata$Species=='Manbid'), ]
Guagui <- Traitdata[ which(Traitdata$Species=='Guagui'), ]
Inlau <- Traitdata[ which(Traitdata$Species=='Inlau'), ]
Schmor <- Traitdata[ which(Traitdata$Species=='Schmor'), ]
Premon <- Traitdata[ which(Traitdata$Species=='Premon'), ]
Urebac <- Traitdata[ which(Traitdata$Species=='Urebac'), ]
Cecsch <- Traitdata[ which(Traitdata$Species=='Cecsch'), ]
Traitdata1 <- rbind(Tetbal, Manbid, Guagui, Inlau, Schmor, Premon)
Traitdata2 <- rbind(Tetbal, Manbid, Guagui, Inlau, Schmor)
Traitdata3 <- rbind (Tetbal, Manbid, Guagui, Inlau, Schmor, Premon, Urebac)
Traitdata4 <- rbind(Tetbal, Manbid, Guagui, Inlau, Schmor, Urebac)
library(ggplot2)
### LMA triat
LMA <- ggplot(Traitdata3, aes(fill = Species , y=`LMA (g/m2)`, x=Species)) + geom_boxplot() + scale_fill_manual(values = Color3) + labs(x = "" , y = "LMA (g/m2)")+ theme(text = element_text(size=20))
LMA
### LA trait
LA <- ggplot(Traitdata3, aes(fill = Species , y= AvgLeafArea, x=Species)) + geom_boxplot() + scale_fill_manual(values = Color3) + labs(x = "" , y = "LA (cm2)")+ theme(text = element_text(size=20))
LA
### Leaf thickness trait
LT <- ggplot(Traitdata3, aes(fill = Species , y=Leafthickness, x=Species)) + geom_boxplot() + scale_fill_manual(values = Color3) + labs(x = "" , y = "Leaf thickness (mm)")+ theme(text = element_text(size=20)) +  expand_limits(y = 0)
LT
### LDMC trait
LDMC <- ggplot(Traitdata3, aes(fill = Species , y=`LDMC (%)`, x=Species)) + geom_boxplot() + scale_fill_manual(values = Color3) + labs(x = "" , y = "LDMC (%)")+ theme(text = element_text(size=20))
LDMC
### WD trait
Traitdata4$`Stem density (g/cm3)` <- as.numeric(Traitdata4$`Stem density (g/cm3)`)
WD <- ggplot(Traitdata4, aes(fill = Species , y=`Stem density (g/cm3)` , x=Species)) + geom_boxplot() + scale_fill_manual(values = Color4) + labs(x = "" , y = "Stem density (g/cm3")+ theme(text = element_text(size=20))
WD
### WDMC trait
## take premon out, has no stem in seedling stage
## Urebac data varies so much to a low amount of datapoints, can be taken out as well
WDMC <- ggplot(Traitdata2, aes(fill = Species , y=`WDMC (%)`, x=Species)) + geom_boxplot() + scale_fill_manual(values = Color2) + labs(x = "" , y = "WDMC (%)")+ theme(text = element_text(size=20))
WDMC
library(ggpubr)
ggarrange(LMA, LA, LT, LDMC, WDMC, WD, common.legend = TRUE, legend = "bottom")
# Convert species names to a factor
Traitdata$Species <- as.factor(Traitdata$Species)
### plot traits
cols <- brewer.pal(8, "Dark2")
par(mfcol=c(2,3), mar=c(4,4,1,1))
for(k in 1:6){
yvar <- c("LMA (g/m2)", "LDMC (%)", "AvgLeafArea", "Leafthickness","Stem density (g/cm3)", "WDMC (%)")[k]
y <- unlist(Traitdata[,yvar])
x <- Traitdata$Moisture
plot(x, y, bg=cols[as.factor(Traitdata$Species)], pch=21, cex.lab=1.1,
xlab="Soil_moisture %",
ylab=c("LMA (g/m2)",
"LDMC (%)",
"AvgLeafArea (cm2)",
"Leafthickness (mm)",
"Stem density (g/cm3)",
"WDMC (%)")[k])
for(i in seq_along(levels(Traitdata$Species))){
tmpy <- y[Traitdata$Species == levels(Traitdata$Species)[i]]
tmpx <- x[Traitdata$Species == levels(Traitdata$Species)[i]]
if(sum(!is.na(tmpy))>2){
fit <- lm(tmpy ~ tmpx)
lty <- ifelse(summary(fit)$coefficients[2,4] < 0.05, 1, 2)
lwd <- ifelse(summary(fit)$coefficients[2,4] < 0.05, 3, 1)
abline(fit, col=cols[i], lwd=lwd, lty=lty)
}
if(k==1){
legend('topleft', legend=c("C. shreberiana","G. guidonia", "I. laurina", "M. bidentata", "P. montana", "S. morototoni", "T. balsamifera", "U. baccifera"),
pt.bg=cols[seq_along(levels(Traitdata$Species))],
pch=21, cex=0.9, pt.cex=2.5, bg='white', text.font=c(3))}
}
}
par(mfcol=c(2,3), mar=c(4,4,1,1))
for(k in 1:6){
yvar <- c("LMA (g/m2)", "LDMC (%)", "AvgLeafArea", "Leafthickness","Stem density (g/cm3)", "WDMC (%)")[k]
y <- unlist(Traitdata[,yvar])
x <- Traitdata$Moisture
plot(x, y, bg=cols[as.factor(Traitdata$Species)], pch=21, cex.lab=1.1,
xlab="Soil_moisture %",
ylab=c("LMA (g/m2)",
"LDMC (%)",
"AvgLeafArea (cm2)",
"Leafthickness (mm)",
"Stem density (g/cm3)",
"WDMC (%)")[k])
for(i in seq_along(levels(Traitdata$Species))){
tmpy <- y[Traitdata$Species == levels(Traitdata$Species)[i]]
tmpx <- x[Traitdata$Species == levels(Traitdata$Species)[i]]
if(sum(!is.na(tmpy))>2){
fit <- lm(tmpy ~ tmpx)
lty <- ifelse(summary(fit)$coefficients[2,4] < 0.05, 1, 2)
lwd <- ifelse(summary(fit)$coefficients[2,4] < 0.05, 3, 1)
abline(fit, col=cols[i], lwd=lwd, lty=lty)
}
if(k==1){
legend('topleft', legend=c("C. shreberiana","G. guidonia", "I. laurina", "M. bidentata", "P. montana", "S. morototoni", "T. balsamifera", "U. baccifera"),
pt.bg=cols[seq_along(levels(Traitdata$Species))],
pch=21, cex=0.9, pt.cex=2.5, bg='white', text.font=c(3))}
}
}
library(readr)
Data_for_analysis <- read_csv("output_data/Data_for_analysis.csv")
View(Data_for_analysis)
# Load data
dataset <- df
##%######################################################%##
#                                                          #
####                  Load R packages                   ####
#                                                          #
##%######################################################%##
resetPar <- function() {
dev.new()
op <- par(no.readonly = TRUE)
dev.off()
op
}
par(resetPar())
folder_names <- c( "output_data", 'output_plot')
#Check if the folders  exist in the current directory, if not creates it
for (i in folder_names){
ifelse(!dir.exists(i), dir.create(i), print("Folder exists already"))
}
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c('raster','sp','readxl', 'FD')
ipak(packages)
plot <- read.csv("DATA/RAW/infc05_quantiF3/t1_05_quantiF3.csv", sep=";")
plot <- plot[plot$codcfor < 17,] # Filter unwanted Forest codes out
# Remove plots with recent explotation
plot <- plot[plot$Vut_ha == 0 | is.na(plot$Vut_ha),]
# Remove unused columns in plot data
plot <- plot[,colnames(plot) %in% c("idpunto","codcfor",
"LAT_ND_W84","LON_ND_W84",
"ICCapv_ha","ICWapv_ha","ICVapv_ha",
"Capv_ha","Capm_ha")]
# Here our working projection
setProj<-"+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
# Making spatialpointdataframe before extraction allow controlling for possible CRS misleding
head(plot)
xy.dt<- plot[,3:2]
quanti.sp<- SpatialPointsDataFrame(coords = xy.dt,
data = plot,
proj4string = CRS(setProj))
plot(quanti.sp, pch='.')
rm(xy.dt)
##%######################################################%##
#                                                          #
####               ADD ENVIRONMENTAL DATA               ####
#                                                          #
##%######################################################%##
#----- LOAD VPD and check projection coherence -----#
vpd.r<-raster::raster("DATA/TerraClimate19812010_vpd_italy.nc")
raster::crs(vpd.r)
quanti.sp@data$vpd <-raster::extract(vpd.r, quanti.sp)
rm(vpd.r)
#---- LOAD SoilMoisture and check projection coherence -----#
soilmoisture.r<-raster::raster("DATA/TerraClimate19812010_soil_italy.nc")
raster::crs(soilmoisture.r)
quanti.sp@data$soilmoisture <-raster::extract(soilmoisture.r, quanti.sp)
rm(soilmoisture.r)
#---- Topographic  -----#
italy_elev <- raster::getData('alt',country="ITA", path = "DATA")
projection(italy_elev)
italy_slp <- terrain(italy_elev, opt=c('slope'), unit='degrees')
italy_asp <- terrain(italy_elev, opt=c('aspect'), unit='degrees')
quanti.sp@data$elev<-raster::extract(italy_elev, quanti.sp)
quanti.sp@data$slope<-raster::extract(italy_slp, quanti.sp)
quanti.sp@data$aspect<-raster::extract(italy_asp, quanti.sp)
cc<- raster::raster("DATA/climateclassification/hdr.adf")
raster::crs(cc)
# So, being incompatible projections
quanti.sp_proj <- spTransform(quanti.sp, raster::crs(cc))
projection(quanti.sp_proj)
quanti.sp_proj@data$climate_classification<-raster::extract(cc, quanti.sp_proj)
# Reproject to the original proj
quanti.sp <- spTransform(quanti.sp_proj, CRS(setProj)) # reproject to the original proj
head(quanti.sp@data)
rm(quanti.sp_proj)
### FOR PLOTS THAT HAVE NA VALUES OF CLIMATE, ASSIGN VALUE FROM NEAREST, NON-NA GRID CELL
# devtools::install_github("Pakillo/rSDM")
library(rSDM)
## Better below
pts = quanti.sp[is.na((quanti.sp$slope)),]
pts <- points2nearestcell(locs=pts, ras=italy_slp, showmap=F, showchanges=F)
quanti.sp$slope[is.na(quanti.sp$slope)] <- raster::extract(italy_slp, pts)
pts = quanti.sp[is.na((quanti.sp$aspect)),]
pts <- points2nearestcell(locs=pts, ras=italy_asp, showmap=F, showchanges=F)
quanti.sp$aspect[is.na(quanti.sp$aspect)] <- raster::extract(italy_asp, pts)
# So, being incompatible projections
quanti.sp_proj <- spTransform(quanti.sp, raster::crs(cc))
pts = quanti.sp_proj[is.na((quanti.sp_proj$climate_classification)),]
pts <- points2nearestcell(locs=pts, ras=cc, showmap=F, showchanges=F)
quanti.sp_proj$climate_classification[is.na(quanti.sp_proj$climate_classification)] <- raster::extract(cc, pts)
# Reproject to the original proj
quanti.sp <- spTransform(quanti.sp_proj, CRS(setProj)) # reproject to the original proj
rm(italy_asp, italy_elev, italy_slp, quanti.sp_proj,cc)
load("DATA/bio_df.RData")
quanti.sp@data<- merge(quanti.sp@data, bio.df, by='idpunto')
# Back to dataframe
df<- quanti.sp@data  # I called the whole dataframe
# Read tree data
tree <- read.table("DATA/RAW/infc05_apv/t2_05_apv.csv", sep=";", header=T)
tree <- tree[tree$idpunto %in% df$idpunto,]
# Read trait data
trait <- as.data.frame(readxl::read_excel("DATA/TraitDataFrame.xlsx",
sheet = "AllTraits",
col_types = c("text",
"text",
"numeric",
"numeric",
"numeric",
"numeric",
"numeric",
"numeric",
"numeric"), na = "na"))
# Remove vessel traits & species not in plots
trait <- trait[trait$`Species Code` %in% tree$SPcod, -c(8:9)]
rownames(trait) <- trait$`Species Code`
View(tree)
View(trait)
# Log-transform some variables
trait$SeedMass_log <- log(trait$SeedMass)
trait$Height_log <- log(trait$Height)
trait$SLA_log <- log(trait$SLA)
# Subset to 5 traits and only 1 NA per row for Fdisp
fd_trait <- trait[rowSums(is.na(trait[,c(3:7)])) < 2 , -c(1:4,6)]
View(trait)
View(tree)
View(df)
Error <- merge(tree, trait, by.x = "SPcod", by.y = "Species Code")
View(Error)
View(Error)
View(bio.df)
View(df)
ErrorB <- merge(Error, df, by.x = "idpunto", by.y = "idpunto")
View(ErrorB)
ErrorFinal <- data.frame(ErrorB$idpunto, ErrorB$SPcod, ErrorB$SPcod, ErrorB$vpd, ErrorB$XylemVulnerability)
View(ErrorFinal)
hist(tapply(ErrorFinal$ErrorB.XylemVulnerability, ErrorFinal$ErrorB.idpunto, function(x) sum(is.na(x)))
)
hist(tapply(ErrorFinal$ErrorB.XylemVulnerability, ErrorFinal$ErrorB.idpunto, function(x) sum(is.na(x)))
+ )
hist(tapply(ErrorFinal$ErrorB.XylemVulnerability, ErrorFinal$ErrorB.idpunto, function(x) sum(is.na(x))))
table(tapply(ErrorFinal$ErrorB.XylemVulnerability, ErrorFinal$ErrorB.idpunto, function(x) sum(is.na(x))))
df2 <- ErrorFinal[!duplicated(paste(ErrorFinal$ErrorB.idpunto , ErrorFinal$ErrorB.SPcod)),]
View(df2)
hist(tapply(df2$ErrorB.XylemVulnerability, df2$ErrorB.idpunto, function(x) sum(is.na(x))))
table(tapply(df2$ErrorB.XylemVulnerability, df2$ErrorB.idpunto, function(x) sum(is.na(x))))
hist(ErrorFinal$ErrorB.vpd[!is.na(ErrorFinal$ErrorB.XylemVulnerability], col=1)
hist(ErrorFinal$ErrorB.vpd[!is.na(ErrorFinal$ErrorB.XylemVulnerability)], col=1)
hist(ErrorFinal$ErrorB.vpd[!is.na(ErrorFinal$ErrorB.XylemVulnerability)], add= T, col=2)
hist(tapply(df2$ErrorB.XylemVulnerability, df2$ErrorB.vpd, function(x) sum(is.na(x))))
